################################################################################
# Pool Entity
################################################################################

type Pool @entity {
  id: ID! # address
  collateralToken: CollateralToken!
  currencyToken: Bytes! # address
  durations: [BigInt!]! # uint64[] (in seconds)
  rates: [BigInt!]! # uint64[]
  totalValueLocked: BigInt! # uint256
  totalValueAvailable: BigInt! # uint256
  totalValueUsed: BigInt! # uint256
  maxBorrow: BigInt! # uint256
  maxLoanDuration: BigInt! # uint64 (in seconds)
  delegationRegistry: Bytes! # address
  ticks: [Tick!]! @derivedFrom(field: "pool")
  deposits: [Deposit!]! @derivedFrom(field: "pool")
  loans: [Loan!]! @derivedFrom(field: "pool")
}

################################################################################
# CollateralToken Entity
################################################################################

type CollateralToken @entity {
  id: ID! # address
  name: String!
  totalValueLocked: BigInt! # uint256
  totalValueAvailable: BigInt # uint256
  totalValueUsed: BigInt! # uint256
  maxBorrow: BigInt! # uint256
  maxLoanDuration: BigInt! # uint64 (in seconds)
  minAPR: Int! # percentage
  pools: [Pool!]! @derivedFrom(field: "collateralToken")
  poolIds: [String!]!
}

################################################################################
# Tick Entity
################################################################################

type Tick @entity {
  id: ID! # <pool>-tick-<encoded-tick>
  pool: Pool!
  # encoded tick
  raw: BigInt!
  # decoded tick
  limit: BigInt! # uint128
  duration: BigInt! # uint64
  rate: BigInt! # uint64
  durationIndex: Int! # uint3
  rateIndex: Int! # uint3
  # node info
  value: BigInt! # uint128
  shares: BigInt! # uint128
  available: BigInt! # uint128
  pending: BigInt! # uint128
  redemptionPending: BigInt! # uint128
  prev: BigInt! # uint128
  next: BigInt! # uint128
}

################################################################################
# Deposit Entity
################################################################################

type Deposit @entity {
  id: ID! # <pool>-deposit-<account>-<tick>
  pool: Pool!
  tick: Tick!
  account: Bytes! # address
  shares: BigInt! # uint128
  depositedAmount: BigInt! # increases on Deposited events and decreases on Withdrawn ones
  redemptionPending: BigInt! # uint128
  redemptionIndex: BigInt! # uint128
  redemptionTarget: BigInt! # uint128
  updatedAt: BigInt! # uint64 (seconds since epoch)
  createdAt: BigInt! # uint64 (seconds since epoch)
}

################################################################################
# Bundle Entity
################################################################################

type Bundle @entity {
  id: ID! # bundle token id
  owner: Bytes! # address
  collateralWrapperContext: Bytes!
  underlyingCollateralToken: CollateralToken
  underlyingCollateralTokenIds: [BigInt!]! # uint256[]
}

################################################################################
# Loan Entity
################################################################################

enum LoanStatus {
  Active
  Liquidated
  Repaid
  CollateralLiquidated
}

type Loan @entity {
  id: ID! # loan receipt hash
  pool: Pool!
  status: LoanStatus!
  timestamp: BigInt! # uint64 (in seconds since epoch)
  bundle: Bundle # set only if this is a bundle loan
  delegate: Bytes # address
  # Decoded Loan Receipt
  borrower: Bytes! # address
  maturity: BigInt! # uint64 (in seconds since epoch)
  duration: BigInt! # uint64 (in seconds)
  collateralToken: CollateralToken! # in case of a bundle/note, this will still refer to the underlying collateral token
  collateralTokenIds: [BigInt!]! # uint256[] (in case of a bundle/note, this will still refer to the underlying collateral token ids)
  ticks: [BigInt!]! # uint128[]
  interests: [BigInt!]! # uint128[]
  principal: BigInt! # uint256
  repayment: BigInt! # uint256
  collateralWrapperContext: Bytes!
  # Raw Loan Receipt
  loanReceipt: Bytes!
}

################################################################################
# Pool Events
################################################################################

type PoolEvent @entity {
  id: ID! # <pool>-<tx hash>
  transactionHash: Bytes!
  timestamp: BigInt! # uint64
  account: Bytes! # address
  type: PoolEventType!
  pool: Pool!
  deposit: Deposit # set only if type == Deposited
  loanOriginated: LoanOriginated
  loanPurchased: LoanPurchased
  LoanRepaid: LoanRepaid
  loanLiquidated: LoanLiquidated
  deposited: Deposited
  redeemed: Redeemed
  withdrawn: Withdrawn
}

enum PoolEventType {
  LoanOriginated
  LoanRepaid
  LoanLiquidated
  Deposited
  Redeemed
  Withdrawn
}

type LoanOriginated @entity {
  id: ID! # <pool>-<tx hash>
  loan: Loan!
}

type LoanPurchased @entity {
  id: ID! # <pool>-<tx hash>
  loan: Loan!
}

type LoanRepaid @entity {
  id: ID! # <pool>-<tx hash>
  loan: Loan!
}

type LoanLiquidated @entity {
  id: ID! # <pool>-<tx hash>
  loan: Loan!
}

type Deposited @entity {
  id: ID! # <pool>-<tx hash>
  account: Bytes! # address
  tick: Tick!
  amount: BigInt! # uint256
  shares: BigInt! # uint256
}

type Redeemed @entity {
  id: ID! # <pool>-<tx hash>
  account: Bytes! # address
  tick: Tick!
  shares: BigInt! # uint256
  estimatedAmount: BigInt! # uint256
}

type Withdrawn @entity {
  id: ID! # <pool>-<tx hash>
  account: Bytes! # address
  tick: Tick!
  shares: BigInt! # uint256
  amount: BigInt! # uint256
}
