################################################################################
# Pool Entity
################################################################################

type Pool @entity {
  id: ID! # address
  currencyToken: Bytes! # address
  maxLoanDuration: BigInt! # uint64 (in seconds)
  collateralFilter: Bytes! # address
  interestRateModel: Bytes! # address
  collateralLiquidator: Bytes! # address
  noteTokens: [NoteToken!]! @derivedFrom(field: "pool")
  lendPlatforms: [LendPlatform!]! @derivedFrom(field: "pool")

  loansPurchasedCount: BigInt! # uint
  loansRepaidCount: BigInt! # uint
  loansDefaultedCount: BigInt! # uint
  loansLiquidatedCount: BigInt! # uint
  totalValueLocked: BigInt! # uint
  ticks: [Tick!]! @derivedFrom(field: "pool")
  deposits: [Deposit!]! @derivedFrom(field: "pool")
  loans: [Loan!]! @derivedFrom(field: "pool")

  collateralToken: Bytes! # address
  collateralTokenName: String!
  maxBorrow: BigInt! # uint256
  utilization: BigInt! # uint256
}

type NoteToken @entity {
  id: ID! # <pool>-notetoken-<address>
  noteAdapter: Bytes! # address
  pool: Pool!
}

type LendPlatform @entity {
  id: ID! # <pool>-lendplatform-<address>
  lendAdapter: Bytes! # address
  pool: Pool!
}

################################################################################
# Tick Entity
################################################################################

type Tick @entity {
  id: ID! # <pool>-tick-<depth>
  pool: Pool!
  depth: BigInt! # uint128
  value: BigInt! # uint128
  shares: BigInt! # uint128
  available: BigInt! # uint128
  pending: BigInt! # uint128
  redemptionPending: BigInt! # uint128
  redemptionIndex: BigInt! # uint128
  fulfilledRedemptions: [FulfilledRedemption!]! @derivedFrom(field: "tick")

  prev: BigInt! # uint128
  next: BigInt! # uint128
}

type FulfilledRedemption @entity {
  id: ID! # <pool>-redemption-<depth>-<uid>
  tick: Tick!
  shares: BigInt! # uint128
  amount: BigInt! # uint128
}

################################################################################
# Deposit Entity
################################################################################

type Deposit @entity {
  id: ID! # <pool>-deposit-<account>-<depth>
  pool: Pool!
  account: Bytes! # address
  tick: Tick!
  shares: BigInt! # uint128
  redemptionPending: BigInt! # uint128
  redemptionIndex: BigInt! # uint128
  redemptionTarget: BigInt! # uint128
}

################################################################################
# Loan Entity
################################################################################

enum LoanStatus {
  Active
  Liquidated
  Repaid
  CollateralLiquidated
}

type LiquiditySource @entity {
  id: ID! # <pool>-loan-<loanId>-tick-<depth>
  loan: Loan!
  depth: BigInt! # uint128
  used: BigInt! # uint128
  pending: BigInt! # uint128
}

type Loan @entity {
  id: ID! # <pool>-loan-<loanId>
  pool: Pool!
  loanId: BigInt! # uint256
  status: LoanStatus!

  # Decoded Loan Receipt
  platform: Bytes! # address
  borrower: Bytes! # address
  maturity: BigInt! # uint64 (in seconds since epoch)
  duration: BigInt! # uint64 (in seconds)
  collateralToken: Bytes! # address
  collateralTokenId: Bytes! # uint256
  liquidityTrail: [LiquiditySource!]! @derivedFrom(field: "loan")
  principal: BigInt! # uint256
  repayment: BigInt! # uint256
  # Raw Loan Receipt
  loanReceipt: Bytes!
}

################################################################################
# Pool Events
################################################################################

type PoolEvent @entity {
  id: ID! # <pool>-<tx hash>
  transactionHash: Bytes!
  timestamp: BigInt! # uint64
  type: PoolEventType!
  loanOriginated: LoanOriginated
  loanPurchased: LoanPurchased
  LoanRepaid: LoanRepaid
  loanLiquidated: LoanLiquidated
  collateralLiquidated: CollateralLiquidated
  deposited: Deposited
  redeemed: Redeemed
  withdrawn: Withdrawn
}

enum PoolEventType {
  LoanOriginated
  LoanPurchased
  LoanRepaid
  LoanLiquidated
  CollateralLiquidated
  Deposited
  Redeemed
  Withdrawn
}

type LoanOriginated @entity {
  id: ID! # <pool>-<tx hash>
  loan: Loan!
}

type LoanPurchased @entity {
  id: ID! # <pool>-<tx hash>
  loan: Loan!
}

type LoanRepaid @entity {
  id: ID! # <pool>-<tx hash>
  loan: Loan!
}

type LoanLiquidated @entity {
  id: ID! # <pool>-<tx hash>
  loan: Loan!
}

type CollateralLiquidated @entity {
  id: ID! # <pool>-<tx hash>
  loan: Loan!
  proceeds: BigInt! # uint256
}

type Deposited @entity {
  id: ID! # <pool>-<tx hash>
  deposit: Deposit!
  amount: BigInt! # uint256
  shares: BigInt! # uint256
}

type Redeemed @entity {
  id: ID! # <pool>-<tx hash>
  deposit: Deposit!
  shares: BigInt! # uint256
}

type Withdrawn @entity {
  id: ID! # <pool>-<tx hash>
  deposit: Deposit!
  shares: BigInt! # uint256
  amount: BigInt! # uint256
}
